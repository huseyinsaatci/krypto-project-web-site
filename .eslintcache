[{"C:\\Users\\Hüseyin Saatçi\\Documents\\GitHub\\krypto-project-web-site\\src\\index.js":"1","C:\\Users\\Hüseyin Saatçi\\Documents\\GitHub\\krypto-project-web-site\\src\\App.js":"2","C:\\Users\\Hüseyin Saatçi\\Documents\\GitHub\\krypto-project-web-site\\src\\reportWebVitals.js":"3","C:\\Users\\Hüseyin Saatçi\\Documents\\GitHub\\krypto-project-web-site\\src\\Footer.js":"4","C:\\Users\\Hüseyin Saatçi\\Documents\\GitHub\\krypto-project-web-site\\src\\Header.js":"5","C:\\Users\\Hüseyin Saatçi\\Documents\\GitHub\\krypto-project-web-site\\src\\coin_page\\CoinPage.js":"6","C:\\Users\\Hüseyin Saatçi\\Documents\\GitHub\\krypto-project-web-site\\src\\main_page\\MainPage.js":"7","C:\\Users\\Hüseyin Saatçi\\Documents\\GitHub\\krypto-project-web-site\\src\\main_page\\CoinTable.js":"8","C:\\Users\\Hüseyin Saatçi\\Documents\\GitHub\\krypto-project-web-site\\src\\coin_page\\Content.js":"9","C:\\Users\\Hüseyin Saatçi\\Documents\\GitHub\\krypto-project-web-site\\src\\coin_page\\Chart.js":"10","C:\\Users\\Hüseyin Saatçi\\Documents\\GitHub\\krypto-project-web-site\\src\\data_files\\icons.js":"11"},{"size":593,"mtime":1614418560600,"results":"12","hashOfConfig":"13"},{"size":328,"mtime":1614414697090,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1609534203595,"results":"15","hashOfConfig":"13"},{"size":2862,"mtime":1615395384830,"results":"16","hashOfConfig":"13"},{"size":677,"mtime":1615206928900,"results":"17","hashOfConfig":"13"},{"size":708,"mtime":1615206630405,"results":"18","hashOfConfig":"13"},{"size":319,"mtime":1615206631408,"results":"19","hashOfConfig":"13"},{"size":3807,"mtime":1615395326840,"results":"20","hashOfConfig":"13"},{"size":17524,"mtime":1615394712232,"results":"21","hashOfConfig":"13"},{"size":3791,"mtime":1615394646717,"results":"22","hashOfConfig":"13"},{"size":1634,"mtime":1615198498274,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"6g4x4w",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"C:\\Users\\Hüseyin Saatçi\\Documents\\GitHub\\krypto-project-web-site\\src\\index.js",[],["49","50"],"C:\\Users\\Hüseyin Saatçi\\Documents\\GitHub\\krypto-project-web-site\\src\\App.js",[],"C:\\Users\\Hüseyin Saatçi\\Documents\\GitHub\\krypto-project-web-site\\src\\reportWebVitals.js",[],"C:\\Users\\Hüseyin Saatçi\\Documents\\GitHub\\krypto-project-web-site\\src\\Footer.js",[],"C:\\Users\\Hüseyin Saatçi\\Documents\\GitHub\\krypto-project-web-site\\src\\Header.js",[],"C:\\Users\\Hüseyin Saatçi\\Documents\\GitHub\\krypto-project-web-site\\src\\coin_page\\CoinPage.js",[],"C:\\Users\\Hüseyin Saatçi\\Documents\\GitHub\\krypto-project-web-site\\src\\main_page\\MainPage.js",[],"C:\\Users\\Hüseyin Saatçi\\Documents\\GitHub\\krypto-project-web-site\\src\\main_page\\CoinTable.js",[],"C:\\Users\\Hüseyin Saatçi\\Documents\\GitHub\\krypto-project-web-site\\src\\coin_page\\Content.js",["51"],"import React, { Component, PureComponent } from 'react';\r\nimport '../style.css';\r\nimport Chart from './Chart';\r\nimport coin_colors from '../data_files/coin_data.json';\r\nimport * as icons from '../data_files/icons'\r\n\r\nclass Content extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { coin: [], isLoading: true };\r\n        this.fetchData = this.fetchData.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const timeInterval = 6000;\r\n        await this.fetchData();\r\n        this.setState({ isLoading: false });\r\n        this.fetchInterval = setInterval(\r\n            () => this.fetchData(), timeInterval\r\n        )\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.fetchInterval);\r\n    }\r\n\r\n    async fetchData() {\r\n        const corsProxy = \"https://arcane-temple-76069.herokuapp.com/\"\r\n        const apiLink = \"https://heroku-vue-express.herokuapp.com/\";\r\n        const coinLink = corsProxy + apiLink + \"coins/\" + this.props.coinID;\r\n        const coinResponse = await fetch(coinLink);\r\n        let coinJSON = await coinResponse.json();\r\n        const statLink = corsProxy + apiLink + \"stats/\" + this.props.coinID;\r\n        const statResponse = await fetch(statLink);\r\n        let statJSON = await statResponse.json();\r\n        this.setState({ coin: coinJSON });\r\n        this.setState({ state: { highPrice: statJSON.highPrice, lowPrice: statJSON.lowPrice } });\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.isLoading) {\r\n            return (\r\n                <div className=\"container dark-blue-b font my-2 p-3 rad-20\">\r\n                    <div className=\"row\">\r\n                        <CoinStand coin={this.state.coin} />\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <StatsOutline coin={this.state.coin} />\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col\">\r\n                            <ChartTable id={this.state.coin.id} />\r\n                        </div>\r\n                        <div className=\"col\">\r\n                            <div className=\"row\">\r\n                                <PriceStatistics coin={this.state.coin} state={this.state.state} />\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <CoinConverter coin={this.state.coin} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\nclass PriceStatistics extends Component {\r\n    render() {\r\n        const parseData = (number) => { return (Number.parseFloat(number)).toLocaleString() };\r\n        const { coin } = this.props;\r\n        const { state } = this.props;\r\n        return (\r\n            <div className=\"mb-2\">\r\n                <div className=\"container rad-10 dark-b\">\r\n\r\n                    <div className=\"row mb-4 pt-3\">\r\n                        <span className=\"fs-3 text-center\">\r\n                            {coin.id} Price Statistics\r\n                        </span>\r\n                    </div>\r\n\r\n                    <div className=\"row fs-5_6 py-3 border-bottom\">\r\n                        <div className=\"col\">\r\n                            {coin.name} Price\r\n                        </div>\r\n\r\n                        <div className=\"col text-end\">\r\n                            ${parseData(coin.price)}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"row fs-5_6 py-3 border-bottom\">\r\n                        <div className=\"col\">\r\n                            24h High\r\n                        </div>\r\n\r\n                        <div className=\"col text-end\">\r\n                            <div className=\"row mb-2\">\r\n                                <div className=\"col\">\r\n                                    ${parseData(state.highPrice)}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"row fs-5_6 py-3 border-bottom\">\r\n                        <div className=\"col\">\r\n                            24h Low\r\n                        </div>\r\n\r\n                        <div className=\"col text-end\">\r\n                            <div className=\"row mb-2\">\r\n                                <div className=\"col\">\r\n                                    ${parseData(state.lowPrice)}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"row fs-5_6 py-3\">\r\n                        <div className=\"col\">\r\n                            All Times High\r\n                        </div>\r\n\r\n                        <div className=\"col text-end\">\r\n                            <div className=\"row mb-2\">\r\n                                <div className=\"col\">\r\n                                    ${parseData(coin.high)}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass StatsOutline extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const parseData = (number) => { return (Number.parseFloat(number).toLocaleString()) };\r\n        const { coin } = this.props;\r\n        return (\r\n            <div className=\"container mb-4 mt-2 fs-5_6\">\r\n                <div className=\"container border-top border-bottom\">\r\n                    <div className=\"row text-start py-4\">\r\n\r\n                        <div className=\"col border-end\">\r\n                            <div className=\"row m-1 pb-2\">\r\n                                <div className=\"col text-info pastel\">\r\n                                    Price Change\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"row m-1 pb-3\">\r\n                                <div className=\"col\">\r\n                                    ${parseData(coin[\"1d\"].price_change)}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"row m-1 pb-2\">\r\n                                <div className=\"col\">\r\n                                    {icons.changeVisualizer(parseData(coin[\"1d\"].price_change_pct), \"p-1\")}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"col border-end\">\r\n                            <div className=\"row m-1 pb-2\">\r\n                                <div className=\"col text-info pastel\">\r\n                                    Volume\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"row m-1 pb-3\">\r\n                                <div className=\"col\">\r\n                                    ${parseData(coin[\"1d\"].volume)}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"row m-1 pb-2\">\r\n                                <div className=\"col\">\r\n                                    {icons.changeVisualizer(parseData(coin[\"1d\"].volume_change_pct), \"p-1\")}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"col border-end\">\r\n                            <div className=\"row m-1 pb-2\">\r\n                                <div className=\"col text-info pastel\">\r\n                                    Market Cap\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"row m-1 pb-3\">\r\n                                <div className=\"col\">\r\n                                    ${parseData(coin.market_cap)}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"row m-1 pb-2\">\r\n                                <div className=\"col\">\r\n                                    {icons.changeVisualizer(parseData(coin[\"1d\"].market_cap_change_pct), \"p-1\")}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"col\">\r\n                            <div className=\"row m-1 pb-2\">\r\n                                <div className=\"col text-info pastel\">\r\n                                    Circulating Supply\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"row m-1 pb-3\">\r\n                                <div className=\"col\">\r\n                                    {parseData(coin.circulating_supply)}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass CoinStand extends Component {\r\n    render() {\r\n        const { coin } = this.props;\r\n        const parseData = (number) => { return (Number.parseFloat(number)).toLocaleString() };\r\n        const change = parseData((coin[\"1d\"].price_change_pct) * 100);\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"row my-3 mx-auto\">\r\n                        <div className=\"col text-start border border-end-0 border-primary p-3 rad-10-left\">\r\n                            {icons.cryptoCoinIconCustom(coin.id, \"icon-big me-2\")}\r\n                            <span className=\"fs-1\">\r\n                                {coin.name}\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"col text-end border border-start-0 border-primary p-3 rad-10-right\">\r\n                            <div className=\"col\">\r\n                                <span className=\"fs-1\">\r\n                                    ${parseData(coin.price)}\r\n                                    {icons.changeVisualizer(change, \"p-1 ms-3 fs-4 align-middle\")}\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass CoinConverter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.coinRef = React.createRef();\r\n        this.usdRef = React.createRef();\r\n        this.setter = (ref, value) => { ref.current.value = value };\r\n        this.onfocusUSD = () => { this.setter(this.usdRef, null); this.setter(this.coinRef, 0) };\r\n        this.onfocusCoin = () => { this.setter(this.usdRef, 0); this.setter(this.coinRef, null) };\r\n        this.setcoinValue = () => { this.setter(this.coinRef, (this.usdRef.current.value / this.props.coin.price).toFixed(4)) }\r\n        this.setusdValue = () => { this.setter(this.usdRef, (this.coinRef.current.value * this.props.coin.price).toFixed(4)) }\r\n    }\r\n\r\n    render() {\r\n        const { coin } = this.props;\r\n        return (\r\n            <div className=\"rad-10 fs-5_6\" >\r\n\r\n                <div className=\"container rad-10-top \" style={{ backgroundColor: coin_colors[coin.id] }}>\r\n                    <div className=\"row p-2\">\r\n                        <div className=\"col-2 my-auto\">\r\n                            <span\r\n                                className=\"iconify image-fluid icon-big\"\r\n                                data-icon={\"cryptocurrency:\" + coin.id.toLowerCase()} >\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"col-4 my-auto\">\r\n                            <div className=\"row pastel\">{coin.id}</div>\r\n                            <div className=\"row\">{coin.name}</div>\r\n                        </div>\r\n                        <div className=\"col-6 my-auto\">\r\n                            <div className=\"input-group my-2\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    ref={this.coinRef}\r\n                                    maxLength=\"8\"\r\n                                    onInput={this.setusdValue}\r\n                                    onFocus={this.onfocusCoin}\r\n                                    value={null}\r\n                                    className=\"form-control input bg-transparent border-0 shadow-none fw-bolder\"\r\n                                    aria-describedby=\"basic-addon1\" />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"container bg-white rad-10-bottom \">\r\n                    <div className=\"row p-2\">\r\n                        <div className=\"col-2 my-auto\">\r\n                            <span\r\n                                className=\"iconify image-fluid icon-dollar\"\r\n                                data-icon=\"ant-design:dollar-circle-filled\">\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"col-4 my-auto text-dark\">\r\n                            <div className=\"row pastel\">USD</div>\r\n                            <div className=\"row\">United States Dollar</div>\r\n                        </div>\r\n                        <div className=\"col-6 my-auto\">\r\n                            <div className=\"input-group my-2\" >\r\n                                <input type=\"text\"\r\n                                    ref={this.usdRef}\r\n                                    maxLength=\"8\"\r\n                                    onInput={this.setcoinValue}\r\n                                    onFocus={this.onfocusUSD}\r\n                                    value={null}\r\n                                    className=\"form-control input-dollar bg-transparent border-0 shadow-none fw-bolder\"\r\n                                    placeholder=\"\" aria-describedby=\"basic-addon1\" />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass ChartTable extends PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { dateInterval: \"monthly\", isTimeVisible: false };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container rad-10 dark-b\">\r\n                <div className=\"row p-2\">\r\n                    <Chart id={this.props.id} timeInterval={this.state.dateInterval} isTimeVisible={this.state.isTimeVisible} />\r\n                </div>\r\n                <div className=\"row p-2\">\r\n                    <div className=\"btn-group\" role=\"group\" aria-label=\"Basic radio toggle button group\">\r\n                        <input\r\n                            type=\"radio\"\r\n                            className=\"btn-check\"\r\n                            onClick={() => { this.setState({ dateInterval: \"daily\", isTimeVisible: true }) }}\r\n                            name=\"btnradio\"\r\n                            id=\"btnradio1\"\r\n                            autoComplete=\"off\" />\r\n                        <label\r\n                            className=\"btn btn-outline-primary\"\r\n                            htmlFor=\"btnradio1\">\r\n                            Day\r\n                        </label>\r\n\r\n                        <input\r\n                            type=\"radio\"\r\n                            className=\"btn-check\"\r\n                            onClick={() => { this.setState({ dateInterval: \"weekly\", isTimeVisible: false }) }}\r\n                            name=\"btnradio\"\r\n                            id=\"btnradio2\"\r\n                            autoComplete=\"off\" />\r\n                        <label\r\n                            className=\"btn btn-outline-primary\"\r\n                            htmlFor=\"btnradio2\">\r\n                            Week\r\n                        </label>\r\n\r\n                        <input\r\n                            type=\"radio\"\r\n                            className=\"btn-check\"\r\n                            onClick={() => { this.setState({ dateInterval: \"monthly\", isTimeVisible: false }) }}\r\n                            name=\"btnradio\"\r\n                            id=\"btnradio3\"\r\n                            autoComplete=\"off\"\r\n                            defaultChecked />\r\n                        <label\r\n                            className=\"btn btn-outline-primary\"\r\n                            htmlFor=\"btnradio3\">\r\n                            Month\r\n                        </label>\r\n\r\n                        <input\r\n                            type=\"radio\"\r\n                            className=\"btn-check\"\r\n                            onClick={() => { this.setState({ dateInterval: \"yearly\", isTimeVisible: false }) }}\r\n                            name=\"btnradio\"\r\n                            id=\"btnradio4\"\r\n                            autoComplete=\"off\" />\r\n                        <label\r\n                            className=\"btn btn-outline-primary\"\r\n                            htmlFor=\"btnradio4\">\r\n                            Year\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Content;","C:\\Users\\Hüseyin Saatçi\\Documents\\GitHub\\krypto-project-web-site\\src\\coin_page\\Chart.js",[],"C:\\Users\\Hüseyin Saatçi\\Documents\\GitHub\\krypto-project-web-site\\src\\data_files\\icons.js",[],["52","53"],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":144,"column":5,"nodeType":"60","messageId":"61","endLine":146,"endColumn":6},{"ruleId":"54","replacedBy":"62"},{"ruleId":"56","replacedBy":"63"},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor",["64"],["65"],"no-global-assign","no-unsafe-negation"]